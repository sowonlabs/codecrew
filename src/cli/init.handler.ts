import { Injectable } from '@nestjs/common';
import { existsSync, mkdirSync, writeFileSync } from 'fs';
import { join } from 'path';
import { TaskManagementService } from '../services/task-management.service';
import { ResultFormatterService } from '../services/result-formatter.service';

export interface InitOptions {
  config?: string;
  workingDirectory?: string;
  force?: boolean;
}

@Injectable()
export class InitHandler {
  constructor(
    private readonly taskManagementService: TaskManagementService,
    private readonly resultFormatterService: ResultFormatterService,
  ) {}

  async handle(options: InitOptions = {}): Promise<{ success: boolean; message: string; taskId: string }> {
    const taskId = this.taskManagementService.createTask({
      type: 'init',
      command: 'codecrew init',
      options: options
    });

    try {
      this.taskManagementService.addTaskLog(taskId, { 
        level: 'info', 
        message: 'Starting CodeCrew project initialization' 
      });

      const workingDir = options.workingDirectory || process.cwd();
      const configPath = options.config || 'agents.yaml';
      const fullConfigPath = join(workingDir, configPath);

      // Check if agents.yaml already exists
      if (existsSync(fullConfigPath) && !options.force) {
        this.taskManagementService.addTaskLog(taskId, { 
          level: 'warn', 
          message: `Configuration file already exists: ${fullConfigPath}` 
        });
        
        const message = `‚ö†Ô∏è  CodeCrew configuration already exists at ${configPath}\n\nUse --force to overwrite existing configuration.`;
        
        this.taskManagementService.completeTask(taskId, { message }, false);
        return { success: false, message, taskId };
      }

      // Create .codecrew/logs directory
      const logDir = join(workingDir, '.codecrew', 'logs');
      if (!existsSync(logDir)) {
        mkdirSync(logDir, { recursive: true });
        this.taskManagementService.addTaskLog(taskId, { 
          level: 'info', 
          message: `Created logs directory: ${logDir}` 
        });
      }

      // Generate default agents.yaml
      const defaultConfig = this.generateDefaultAgentsConfig(workingDir);
      writeFileSync(fullConfigPath, defaultConfig, 'utf8');
      
      this.taskManagementService.addTaskLog(taskId, { 
        level: 'info', 
        message: `Created configuration file: ${fullConfigPath}` 
      });

      const successMessage = this.formatSuccessMessage(configPath, workingDir);
      
      this.taskManagementService.completeTask(taskId, { message: successMessage }, true);
      return { success: true, message: successMessage, taskId };

    } catch (error) {
      const errorMessage = `Failed to initialize CodeCrew project: ${error instanceof Error ? error.message : String(error)}`;
      this.taskManagementService.addTaskLog(taskId, { 
        level: 'error', 
        message: errorMessage 
      });
      
      this.taskManagementService.completeTask(taskId, { error: errorMessage }, false);
      return { success: false, message: errorMessage, taskId };
    }
  }

  private generateDefaultAgentsConfig(workingDir: string): string {
    return `# CodeCrew Agents Configuration
# Generated by 'codecrew init'

agents:
  # Built-in AI Assistants (Ready to use)
  - id: "claude"
    name: "Claude AI"
    role: "AI Assistant"
    team: "AI Team"
    working_directory: "./"
    inline:
      type: "agent"
      provider: "claude"
      system_prompt: |
        Claude AI assistant for general tasks, code analysis, and writing assistance.
        
        IMPORTANT: You are in READ-ONLY ANALYSIS MODE. Do NOT suggest file modifications or code changes.
        Only provide analysis, explanations, reviews, and recommendations based on existing code.
        Focus on understanding and explaining rather than changing anything.
        
        Specialties: General AI, Code Analysis, Writing, Problem Solving
        Capabilities: general_assistance, code_analysis, writing

  - id: "gemini"
    name: "Gemini AI"
    role: "AI Assistant"
    team: "AI Team"
    working_directory: "./"
    inline:
      type: "agent"
      provider: "gemini"
      system_prompt: |
        Google Gemini AI assistant for analysis, development, and problem-solving.
        
        IMPORTANT: You are in READ-ONLY ANALYSIS MODE. Do NOT suggest file modifications or code changes.
        Only provide analysis, explanations, reviews, and recommendations based on existing code.
        Focus on understanding and explaining rather than changing anything.
        
        Specialties: Code Analysis, Architecture Design, Performance Optimization
        Capabilities: code_analysis, architecture_design, optimization

  - id: "copilot"
    name: "GitHub Copilot"
    role: "AI Assistant"
    team: "AI Team"
    working_directory: "./"
    inline:
      type: "agent"
      provider: "copilot"
      system_prompt: |
        GitHub Copilot AI assistant for code development and engineering tasks.
        
        IMPORTANT: You are in READ-ONLY ANALYSIS MODE. Do NOT suggest file modifications or code changes.
        Only provide analysis, explanations, reviews, and recommendations based on existing code.
        Focus on understanding and explaining rather than changing anything.
        
        Specialties: Code Development, Best Practices, Testing
        Capabilities: code_development, testing, best_practices

  # Custom Project Agents (Example configurations)
  # Uncomment and customize the sections below for your project needs
  
  # - id: "backend_developer"
  #   name: "Backend Developer"
  #   role: "developer"
  #   team: "Development Team"
  #   working_directory: "${workingDir}"
  #   options:
  #     - "--allowedTools=Edit,Bash,Computer"
  #     - "--add-dir=."
  #   inline:
  #     type: "agent"
  #     provider: "claude"
  #     system_prompt: |
  #       You are a senior backend developer specializing in server-side development.
  #       Focus on API design, database architecture, and system performance.
  #       
  #       Your expertise includes:
  #       - RESTful API development
  #       - Database design and optimization
  #       - Server architecture and scalability
  #       - Security best practices

  # - id: "frontend_developer"
  #   name: "Frontend Developer"
  #   role: "developer"
  #   team: "Development Team"
  #   working_directory: "${workingDir}"
  #   options:
  #     - "--allow-tool=terminal"
  #     - "--allow-tool=files"
  #     - "--add-dir=."
  #   inline:
  #     type: "agent"
  #     provider: "copilot"
  #     system_prompt: |
  #       You are a senior frontend developer specializing in user interface development.
  #       Focus on user experience, responsive design, and modern frontend frameworks.
  #       
  #       Your expertise includes:
  #       - React, Vue, Angular development
  #       - CSS/SCSS and responsive design
  #       - JavaScript/TypeScript best practices
  #       - Performance optimization

  # - id: "devops_engineer"
  #   name: "DevOps Engineer"
  #   role: "engineer"
  #   team: "Infrastructure Team"
  #   working_directory: "${workingDir}"
  #   inline:
  #     type: "agent"
  #     provider: "gemini"
  #     system_prompt: |
  #       You are a DevOps engineer specializing in infrastructure and deployment.
  #       Focus on automation, monitoring, and system reliability.
  #       
  #       Your expertise includes:
  #       - CI/CD pipeline design
  #       - Container orchestration (Docker, Kubernetes)
  #       - Cloud infrastructure (AWS, GCP, Azure)
  #       - Monitoring and logging systems

# Usage Examples:
# codecrew query "@claude analyze this codebase"
# codecrew query "@claude @gemini @copilot review security practices"
# codecrew execute "@backend_developer create user authentication API"
# codecrew execute "@frontend_developer @backend_developer implement OAuth flow"
`;
  }

  private formatSuccessMessage(configPath: string, workingDir: string): string {
    return `üéâ **CodeCrew Project Initialized Successfully!**

**Configuration File Created:** \`${configPath}\`
**Working Directory:** \`${workingDir}\`
**Logs Directory:** \`.codecrew/logs\`

**Available Agents:**
‚Ä¢ \`@claude\` - Claude AI Assistant (General purpose)
‚Ä¢ \`@gemini\` - Gemini AI Assistant (Analysis & Architecture)  
‚Ä¢ \`@copilot\` - GitHub Copilot (Code Development)

**Next Steps:**
1. **Test your setup:**
   \`codecrew doctor\`

2. **Try a simple query:**
   \`codecrew query "@claude hello world"\`

3. **Customize your agents:**
   Edit \`${configPath}\` to add project-specific agents

4. **Learn more:**
   \`codecrew --help\`

**Pro Tips:**
‚Ä¢ Use multiple agents for different perspectives: \`codecrew query "@claude @gemini analyze this code"\`
‚Ä¢ Add custom agents in \`${configPath}\` for specialized tasks
‚Ä¢ Check agent status anytime with \`codecrew doctor\`

Happy coding with CodeCrew! üöÄ`;
  }
}

// Legacy function for backward compatibility
import { Logger } from '@nestjs/common';
import { CliOptions } from '../cli-options';

const logger = new Logger('InitHandler');

/**
 * Handle init command: codecrew init
 * Creates default agents.yaml configuration and initializes project
 */
export async function handleInit(app: any, args: CliOptions) {
  logger.log('Init command received');

  try {
    // Get InitHandler from app context
    const initHandler = app.get(InitHandler);
    
    console.log('üöÄ Initializing CodeCrew project...');
    
    // Use new InitHandler
    const result = await initHandler.handle({
      config: args.config,
      workingDirectory: process.cwd(),
      force: false // Add force option later if needed
    });
    
    // Output result
    console.log(result.message);
    
    if (!result.success) {
      process.exit(1);
    }
    
  } catch (error) {
    logger.error(`Init failed: ${error instanceof Error ? error.message : error}`);
    
    // Basic fallback message
    console.log('‚ùå Failed to initialize CodeCrew project');
    console.log(`   Error: ${error instanceof Error ? error.message : error}`);
    console.log('   Try running with --force or check file permissions');
    
    process.exit(1);
  }
}